package com.urazem.elifbe.controller;

import com.urazem.elifbe.model.User;
import com.urazem.elifbe.repository.UserRepository;
import org.aspectj.bridge.MessageUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String first_name
            , @RequestParam String last_name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        User n = new User();
        n.setFirstName(first_name);
        n.setLastName(last_name);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
    @DeleteMapping(path="/delete")
    public ResponseEntity<Void> deleteUserById(@RequestParam int id) {
        // This returns a JSON or XML with the users

        userRepository.deleteById(id);
      //  return ResponseEntity.noContent().build();
        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
    }

    @GetMapping(path="/exist")
    public ResponseEntity<User> searchUserById(@RequestParam String fname) {
       User user = userRepository.findByFirstName(fname);
       if(user!=null){
           return new ResponseEntity<User>(user, HttpStatus.OK);
       }else
           return new ResponseEntity<User>(HttpStatus.NOT_FOUND);
    }
}